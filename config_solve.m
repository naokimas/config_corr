% transform_to_corr_mat: whether to trasnform the input and output covariance matrix
% to the correlation matrix.
%   0: no transform
%   1: transform (default)

clear
cd '/Users/masuda/Google Drive/social/config-corr/'
 C = load('data/motivation.txt');
% C = load('data/cov118932_all.txt');
% C = load('data/cov105115_all.txt');
% C = load('data/config-corr/JapanCov.txt');
% C = load('data/config-corr/USCov.txt');

N = size(C,1);

transform_to_corr_mat = 1; 
% if ==1, transform the input covariance matrix to the correlation matrix before running the gradient descent method
% default value is 1

if transform_to_corr_mat == 1
    C = diag(diag(C))^(-1/2) * C * diag(diag(C))^(-1/2); % corr matrix
end

min_eig_C = min(eig(C));
if min_eig_C < 1e-6
    fprintf('min eig = %f\n', min_eig_C);
    error('input correlation/covariance matrix must be full rank');
end

tolerance = 1e-5; % to judge whether the algorithm has converged. In the paper = 1e-5
r = 1e-4; % learning rate. If r is too large, the algorithm would not converge
% default 1e-4
%
% When trasnform_to_corr_mat == 0.
% r = 1e-7 for 105115
% 1e-8 or 4e-8 for 118932 (tolerance 1e-3) -> superslow, 1e-6 too slow
% 1e-9 too slow though valid
% 1e-8, faster than 1e-9 but would take a couple of days perhaps
% 1e-7 much better than 1e-8 but stalls at around error 0.00215
% 1e-6, 5e-7, 3e-7, 2e-7 stops at 1.007
% 3e-0 JP, very slow, USA as well, 3e+1 for USA also does (but anyways
% slow)


[C_con, alpha, beta, it] = max_ent_K_config(C, tolerance, r, 0);
%fprintf('tmax = %d', it);

if transform_to_corr_mat == 1
    C_con = diag(diag(C_con))^(-1/2) * C_con * diag(diag(C_con))^(-1/2); % corr matrix
end
K_con = inv(C_con); % precision matrix

L = N; % L should be set to the length of the original data for which the Pearson correlation is calculated (e.g., length of the time series)

X = mvnrnd(zeros(N,1), C_con, L);
C_sam = X' * X / L; % sample covariance matrix generated by the estimated configuration model
if transform_to_corr_mat == 1
    C_sam = diag(diag(C_sam))^(-1/2) * C_sam * diag(diag(C_sam))^(-1/2); % sample correlation matrix
end
K_sam = inv(C_sam); % sample precision matrix

K = inv(C); % empirical precision matrx
